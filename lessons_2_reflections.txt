What happens when you initialize a repository? Why do you 
need to do it?

It creates an empty repository and adds all relevant meta 
data in a hidden directory called .git. You need to do it so 
that you can begin tracking your changes.

#2 How is the staging area different from the working 
directory and the repository? What value do you think it 
offers?

The staging area is a like a temporary holding tank where you 
can place files that you think you would like to commit 
without actually committing them.  Neither the working 
directory or the repository is changed.

I think it's valuable because it gives you a chance to change 
your mind before actually committing,  in case youo decide to 
change something else.

#3 How can you use the staging area to make sure you have 
one commit per logical change?

I can use diff to see what changes are in the staging area 
and double check to make sure that I am only committing what 
makes logical sense to commit. I can safely remove changes 
in the staging area that I am not ready to commit.

#4 What  are some situations when branches would be helpful 
in keeping your history organized? How would branches help?

Branches would be helpful when experimenting with code and 
trying something new. Branches would help by making sure 
there is always a clean, working master branch that is 
unaffected by the commits made to other branches until and 
unless they are merged.

#5 How do the diagrams help you visualize the branch 
structure?

They enable me to see which  commits are reachable and which 
are not. They also help me to see what is happening when I 
create and commit to a branch.


#6 What is the result of merging two branches together? Why 
do we represent it in the diagram the way we do?

Merging two branches together takes all of the code changes 
in one branch, compares it to the branch to be merged into, 
and merges the changes. All of the commits made to the 
merged branch are added to the branch into which it was 
merged.

We represent it in the diagram to show which commits are 
reachable from each branch and to see where they originally 
diverged.

#6 What are the pros and cons of Git's automatic merging versus always doing merges manually?

Pros

 - you do not have to manually scan lord knows how many lines of code looking for edits

 - all previous  changes are automatically added to the branch

Cons

 - sometimes a conflict may occur that is not caught by git
